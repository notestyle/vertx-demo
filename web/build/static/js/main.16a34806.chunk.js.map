{"version":3,"sources":["components/Header.js","components/DataTable.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","createPalette","secondary","red","primary","green","typography","useNextVariants","MenuAppBar","_this$props","this","props","classes","setData","isConnected","react_default","a","createElement","AppBar","position","Toolbar","IconButton","className","menuButton","color","aria-label","Typography","variant","grow","MuiThemeProvider","Button","button","onClick","rightIcon","join","React","Component","withStyles","flexGrow","marginLeft","marginRight","margin","spacing","leftIcon","root","width","marginTop","DataTable","state","columns","name","label","options","filter","sort","datas","dist_default","title","data","map","x","id","lastName","role","createdDate","Home","_callee","response","newData","regenerator_default","wrap","_context","prev","next","_this","fetch","sent","json","forEach","push","firstName","Date","toDateString","setState","enqueueSnackbar","t0","console","log","stop","Header","components_DataTable","blue","MyApp","pages_Home","App","withSnackbar","AppSnack","build","maxSnack","anchorOrigin","vertical","horizontal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16a34806.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport createPalette from '@material-ui/core/styles/createPalette';\nimport { green, red } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n    palette: createPalette({\n        secondary: red,\n        primary: green\n    }),\n    typography: {\n        useNextVariants: true,\n    },\n})\n\nconst styles = theme => ({\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    leftIcon: {\n        marginRight: theme.spacing(1),\n    },\n    rightIcon: {\n        marginLeft: theme.spacing(1),\n    },\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(1) * 3,\n    },\n});\n\nclass MenuAppBar extends React.Component {\n\n    render() {\n        const { classes, setData, isConnected } = this.props;\n        return(\n            \n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n                            <i className=\"fa fa-seedling\"></i>\n                        </IconButton>\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                            Vertx Api Test\n                    </Typography>\n                        <MuiThemeProvider theme={theme}>\n                            <Button variant=\"contained\" className={classes.button} color={isConnected ? 'secondary' : 'primary'} onClick={setData}>\n                                {isConnected ? 'Clear' : 'Start'}\n                            <i className={['fa', 'fa-wifi', classes.rightIcon].join(' ')} />\n                            </Button>\n                        </MuiThemeProvider>\n                    </Toolbar>\n                </AppBar>\n            \n        );\n    }\n}\n\nMenuAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MenuAppBar);","import React from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\nclass DataTable extends React.Component {\n    state = {\n        columns: [\n            {\n                name: \"id\",\n                label: \"â„–\",\n                options: {\n                    filter: true,\n                    sort: true,\n                }\n            },\n            {\n                name: \"name\",\n                label: \"Name\",\n                options: {\n                    filter: false,\n                    sort: false,\n                }\n            },\n            {\n                name: \"lastName\",\n                label: \"LastName\",\n                options: {\n                    filter: false,\n                    sort: false,\n                }\n            },\n            {\n                name: \"role\",\n                label: \"Role\",\n                options: {\n                    filter: false,\n                    sort: false,\n                }\n            },\n            {\n                name: \"createdDate\",\n                label: \"CreatedDate\",\n                options: {\n                    filter: false,\n                    sort: false,\n                }\n            }\n        ]\n    }\n\n    render() {\n        const { datas } = this.props;\n\n        return (\n            <MUIDataTable\n                title={\"Customers\"}\n                data={datas.map(x => [x.id, x.name, x.lastName, x.role, x.createdDate])}\n                columns={this.state.columns}\n            />\n        )\n    }\n}\n\nexport default DataTable;","import React, { Component } from 'react';\n\nimport Header from '../components/Header';\nimport DataTable from '../components/DataTable';\n\nclass Home extends Component {\n    state = {\n        datas: [],\n        isConnected: false\n    }\n\n    setData = async() => {\n        if(!this.state.isConnected){\n            try{\n                let response = await fetch(`http://localhost:8899/customers`);\n                let data = await response.json();\n                let newData = this.state.datas;\n                \n                // console.log(newData);\n                data.forEach(x => {\n                    newData.push({\n                        id: x.id,\n                        name: x.firstName,\n                        lastName: x.lastName,\n                        role: x.role,\n                        createdDate: (new Date()).toDateString()\n                    })\n                });\n\n                this.setState({datas: newData});\n                \n                this.props.enqueueSnackbar('Data downloaded.', { variant: 'success'});\n                this.setState({isConnected : true});\n            }catch(err){\n                console.log(err);\n                this.props.enqueueSnackbar('Error: ', err, { variant: 'error'});\n                this.setState({isConnected : false});\n            }\n        }\n        else{\n            this.setState({ datas: []});\n            this.setState({isConnected : false});\n            this.props.enqueueSnackbar('Data cleared!', { variant: 'warning'});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Header isConnected={this.state.isConnected} setData={this.setData} />\n                <DataTable datas={this.state.datas}/>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { blue, red } from '@material-ui/core/colors';\nimport { SnackbarProvider, withSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\n\nimport Home from './pages/Home';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: red\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nclass MyApp extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Home enqueueSnackbar={this.props.enqueueSnackbar} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nMyApp.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n};\n\nconst App = withSnackbar(MyApp);\n\nfunction AppSnack() {\n  return (\n    <SnackbarProvider maxSnack={5} anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n      <App />\n    </SnackbarProvider>\n  );\n}\n\nexport default AppSnack;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}